// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pTegSiZJp55bKXTV98MuX6
// Component: jZGcplvKdQ
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: pTegSiZJp55bKXTV98MuX6/projectcss
import sty from "./PlasmicGamnav.module.css"; // plasmic-import: jZGcplvKdQ/css

import VectorsvgIcon from "./icons/PlasmicIcon__Vectorsvg"; // plasmic-import: k3RE5uMRxS/icon

export type PlasmicGamnav__VariantMembers = {};
export type PlasmicGamnav__VariantsArgs = {};
type VariantPropType = keyof PlasmicGamnav__VariantsArgs;
export const PlasmicGamnav__VariantProps = new Array<VariantPropType>();

export type PlasmicGamnav__ArgsType = {};
type ArgPropType = keyof PlasmicGamnav__ArgsType;
export const PlasmicGamnav__ArgProps = new Array<ArgPropType>();

export type PlasmicGamnav__OverridesType = {
  root?: p.Flex<"svg">;
};

export interface DefaultGamnavProps {
  className?: string;
}

function PlasmicGamnav__RenderFunc(props: {
  variants: PlasmicGamnav__VariantsArgs;
  args: PlasmicGamnav__ArgsType;
  overrides: PlasmicGamnav__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <VectorsvgIcon
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      onClick={"" as const}
      role={"img"}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGamnav__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGamnav__VariantsArgs;
    args?: PlasmicGamnav__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGamnav__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGamnav__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGamnav__ArgProps,
          internalVariantPropNames: PlasmicGamnav__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGamnav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGamnav";
  } else {
    func.displayName = `PlasmicGamnav.${nodeName}`;
  }
  return func;
}

export const PlasmicGamnav = Object.assign(
  // Top-level PlasmicGamnav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicGamnav
    internalVariantProps: PlasmicGamnav__VariantProps,
    internalArgProps: PlasmicGamnav__ArgProps
  }
);

export default PlasmicGamnav;
/* prettier-ignore-end */
